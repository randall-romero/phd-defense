sheetName='V_7.1',
rowIndex=c(2,5:251),
header=TRUE)
names(foodSupply)[1:2] <- c("Code","Country")
names(undernourish)[1:2] <- c("Code","Country")
allCountries <- foodSupply$Country
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
library(rJava)
downloadAgain
header=TRUE)
library("xlsx")
if(downloadAgain){
download.file(url='http://www.bit.ly/14FRxGV',
destfile='./Data/Food_Security_Indicators.xlsx',
mode='wb')
}
foodSupply <- read.xlsx(file='./Data/Food_Security_Indicators.xlsx',
sheetName='V_1.1',
rowIndex=c(2,5:251),
header=TRUE)
undernourish <- read.xlsx(file='./Data/Food_Security_Indicators.xlsx',
sheetName='V_7.1',
rowIndex=c(2,5:251),
header=TRUE)
names(foodSupply)[1:2] <- c("Code","Country")
names(undernourish)[1:2] <- c("Code","Country")
allCountries <- foodSupply$Country
library("xlsx")
if(downloadAgain){
download.file(url='http://www.bit.ly/14FRxGV',
destfile='./Data/Food_Security_Indicators.xlsx',
mode='wb')
}
foodSupply <- read.xlsx(file='./Data/Food_Security_Indicators.xlsx',
sheetName='V_1.1', #Average dietary energy supply adequacy
rowIndex=c(2,5:251),
header=TRUE)
undernourish <- read.xlsx(file='./Data/Food_Security_Indicators.xlsx',
sheetName='V_2.6',    #Prevalence of undernourishment
rowIndex=c(2,5:251),
header=TRUE)
names(foodSupply)[1:2] <- c("Code","Country")
names(undernourish)[1:2] <- c("Code","Country")
allCountries <- foodSupply$Country
library("xlsx")
if(downloadAgain){
download.file(url='http://www.bit.ly/14FRxGV',
destfile='./Data/Food_Security_Indicators.xlsx',
mode='wb')
}
foodSupply <- read.xlsx(file='./Data/Food_Security_Indicators.xlsx',
sheetName='V_1.1', #Average dietary energy supply adequacy
rowIndex=c(2,5:251),
header=TRUE)
undernourish <- read.xlsx(file='./Data/Food_Security_Indicators.xlsx',
sheetName='V_2.6',    #Prevalence of undernourishment
rowIndex=c(2,5:251),
header=TRUE)
names(foodSupply)[1:2] <- c("Code","Country")
names(undernourish)[1:2] <- c("Code","Country")
allCountries <- foodSupply$Country
library("xlsx")
if(downloadAgain){
download.file(url='http://www.bit.ly/14FRxGV',
destfile='./Data/Food_Security_Indicators.xlsx',
mode='wb')
}
foodSupply <- read.xlsx(file='./Data/Food_Security_Indicators.xlsx',
sheetName='V_1.1', #Average dietary energy supply adequacy
rowIndex=c(2,5:251),
header=TRUE)
undernourish <- read.xlsx(file='./Data/Food_Security_Indicators.xlsx',
sheetName='V_2.6',    #Prevalence of undernourishment
rowIndex=c(2,5:251),
header=TRUE)
names(foodSupply)[1:2] <- c("Code","Country")
names(undernourish)[1:2] <- c("Code","Country")
allCountries <- foodSupply$Country
library("xlsx")
if(downloadAgain){
download.file(url='http://www.bit.ly/14FRxGV',
destfile='./Data/Food_Security_Indicators.xlsx',
mode='wb')
}
foodSupply <- read.xlsx(file='./Data/Food_Security_Indicators.xlsx',
sheetName='V_1.1', #Average dietary energy supply adequacy
rowIndex=3:248,
header=TRUE)
undernourish <- read.xlsx(file='./Data/Food_Security_Indicators.xlsx',
sheetName='V_2.6',    #Prevalence of undernourishment
rowIndex=3:248,
header=TRUE)
names(foodSupply)[1:2] <- c("Code","Country")
names(undernourish)[1:2] <- c("Code","Country")
allCountries <- foodSupply$Country
library("xlsx")
if(downloadAgain){
download.file(url='http://www.bit.ly/14FRxGV',
destfile='./Data/Food_Security_Indicators.xlsx',
mode='wb')
}
foodSupply <- read.xlsx(file='./Data/Food_Security_Indicators.xlsx',
sheetName='V_1.1', #Average dietary energy supply adequacy
rowIndex=3:248,
header=TRUE)
undernourish <- read.xlsx(file='./Data/Food_Security_Indicators.xlsx',
sheetName='V_2.6',    #Prevalence of undernourishment
rowIndex=3:248,
header=TRUE)
names(foodSupply)[1:2] <- c("Code","Country")
names(undernourish)[1:2] <- c("Code","Country")
allCountries <- foodSupply$Country
foodSupply <- read.xlsx(file='./Data/Food_Security_Indicators.xlsx',
sheetName='V_1.1', #Average dietary energy supply adequacy
rowIndex=3:248,
header=TRUE)
?read.xlsx
knitr::opts_chunk$set(echo=TRUE, fig.path='./Figures/',fig.width=7.0,tidy=FALSE,message=FALSE,cache=FALSE,fig.show='hold')
library('extrafont')
loadfonts(quiet=TRUE,device='pdf')
library('R.matlab')
library('dplyr')
library('reshape2')
library('ggplot2')
source('D:/Users/Randall/Documents/PhD Dissertation/Models/CountryReserve/Scenario.R')
source('D:/Users/Randall/Documents/R/CompEcon/R/bisect.R')
downloadAgain <- FALSE  # used data on disk if false
knitr::opts_chunk$set(echo=TRUE, fig.path='./Figures/',fig.width=7.0,tidy=FALSE,message=FALSE,cache=FALSE,fig.show='hold')
library('extrafont')
loadfonts(quiet=TRUE,device='pdf')
library('R.matlab')
library('dplyr')
library('reshape2')
library('ggplot2')
source('D:/Users/Randall/Documents/PhD Dissertation/Models/CountryReserve/Scenario.R')
source('D:/Users/Randall/Documents/R/CompEcon/R/bisect.R')
downloadAgain <- FALSE  # used data on disk if false
path <- '/Users/Randall/Documents/PhD Dissertation/Models/CountryReserve/Haiti_solution.mat'
data <- readMat(path)
# there is something weird with new version of R.matlab, the following line not needed in older version
data$Solnames <- sapply(data$Solnames, function(x) x[[1]])
data$Simnames <- sapply(data$Simnames, function(x) x[[1]])
Solution <- data.frame(data$Soldata)
colnames(Solution) <- data$Solnames[1:ncol(Solution)]
Solution$Hunger <- 100*Solution$Hunger
Solution$Tax <- 100*Solution$Tax
Simulation <- data.frame(data$Simdata)
colnames(Simulation) <- data$Simnames[1:ncol(Simulation)]
Simulation$Hunger <- 100*Simulation$Hunger
Simulation$Tax <- 100*Simulation$Tax
labels_scenarios = c('Scenario 1:\nBaseline',
'Scenario 2:\nhigher aversion',
'Scenario 3:\nlonger crisis',
'Scenario 4:\nhigher cost',
'Scenario 5:\nlower PgH')
labels_policies = c('Policy A:\nHunger reduction with Grain reserve',
'Policy B:\nHunger reduction with Cash reserve',
'Policy C:\nWelfare maximiz. with Grain reserve',
'Policy D:\nStabilize price with Grain reserve')
labels_prices <- c('tranquil period','food crisis')
labels_prices2 <- c('tranquil\nperiod','food\ncrisis')
Solution$PriceState = factor(Solution$PriceState,labels=labels_prices)
Solution$Target = factor(Solution$Target,labels=c('Hunger','Welfare'))
Solution$Reserve = factor(Solution$Reserve,labels=c('Grain','Deposit'))
Solution$Policy = factor(Solution$Policy,labels=labels_policies[1:3])
Solution$Scenario = factor(Solution$Scenario,labels=labels_scenarios)
Simulation$PriceState = factor(Simulation$PriceState,labels=labels_prices)
Simulation$Target = factor(Simulation$Target,labels=c('Hunger','Welfare'))
Simulation$Reserve = factor(Simulation$Reserve,labels=c('Grain','Deposit'))
Simulation$Policy = factor(Simulation$Policy,labels=labels_policies)
Simulation$Scenario = factor(Simulation$Scenario,labels=labels_scenarios)
baseline <-  Solution %>% filter(Scenario==labels_scenarios[1] & Policy==labels_policies[1])
baseSimul <- Simulation %>% filter(Scenario==labels_scenarios[1] & Policy==labels_policies[1])
optimSimul <- Simulation %>% filter(Policy != labels_policies[4])
ruleSimul <- Simulation %>% filter(Policy == labels_policies[4])
S = makeScenario()
hungerNoPolicy <- 100*HungerRate()
rho <- rep(S$rho,5)
rho[2] <- 3.0
Simulation %>% group_by(Scenario,Policy,PriceState) %>% summarise(x=mean(hunger))
Simulation %>% group_by(Scenario,Policy,PriceState) %>% summarise(x=mean(Hunger))
temp <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% summarise(x=mean(Hunger))
View(temp)
??reshape2
dcast(temp,Policy ~ Scenario + PriceState)
dtemp <- dcast(temp,Policy ~ Scenario + PriceState)
View(dtemp)
dtemp <- dcast(temp,Scenario + PriceState ~ Policy)
View(dtemp)
temp2 <- Simulation %>% group_by(Scenario,Policy) %>% summarise(x=mean(Hunger))
dtemp2 <- dcast(temp2,Scenario ~ Policy)
View(dtemp2)
dtemp <- dcast(temp,Scenario + PriceState ~ Policy,margins = Scenario)
dtemp <- dcast(temp,Scenario + PriceState ~ Policy,margins = TRUE)
View(dtemp)
temp2 <- Simulation %>% group_by(Scenario,Policy) %>% select(Hunger)
View(temp2)
temp2 <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% select(Hunger) %>% dcast(Scenario + PriceState ~ Policy,fun.aggregate = mean,margins = TRUE)
View(temp2)
temp2 <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% select(Hunger) %>% dcast(Scenario + PriceState ~ Policy,fun.aggregate = mean,margins = "PriceState")
temp2 <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% select(Hunger) %>% dcast(Scenario + PriceState ~ Policy,fun.aggregate = mean,margins = "Scenario")
temp2 <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% select(Hunger) %>% dcast(Scenario + PriceState ~ Policy,fun.aggregate = mean,margins = c("Scenario","Policy"))
View(temp2)
temp2 <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% select(Hunger) %>% dcast(Scenario + PriceState ~ Policy,fun.aggregate = mean,margins = "PriceState")
temp2 <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% select(Hunger) %>% dcast(Scenario + PriceState ~ Policy,fun.aggregate = mean,margins = "Scenario")
temp2 <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% select(Hunger) %>% dcast(Scenario + PriceState ~ Policy,fun.aggregate = mean,margins = c("Scenario","Policy"))
temp2 <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% select(Hunger) %>% dcast(Scenario + PriceState ~ Policy,fun.aggregate = mean,margins = c("Scenario","PriceState"))
temp2 <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% select(Hunger) %>% dcast(Scenario + PriceState ~ Policy,fun.aggregate = mean,margins = TRUE)
View(temp2)
levels(temp2$PriceState) <- c('p_L','p_H','both')
View(temp2)
temp2 <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% select(Hunger) %>% dcast(Scenario + PriceState ~ Policy,fun.aggregate = mean,margins = '\_row')
temp2 <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% select(Hunger) %>% dcast(Scenario + PriceState ~ Policy,fun.aggregate = mean,margins = '\row')
temp2 <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% select(Hunger) %>% dcast(Scenario + PriceState ~ Policy,fun.aggregate = mean,margins = 'grand\_row')
temp2 <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% select(Hunger) %>% dcast(Scenario + PriceState ~ Policy,fun.aggregate = mean,margins = 'grand\row')
temp2 <- Simulation %>% group_by(Scenario,Policy,PriceState) %>% select(Hunger) %>% dcast(Scenario + PriceState ~ Policy,fun.aggregate = mean,margins = 'grand')
hungerNoPolicy
hungerNoPolicy2 <- hungerNoPolicy
hungerNoPolicy2[3] = (1-S$gamma)*hungerNoPolicy[1] + S$gamma*hungerNoPolicy[2]
hungerNoPolicy2
dim(temp2)
names(temp2)
names(temp2)[7] <- 'No reserves'
temp2$No reserves <- hungerNoPolicy2
temp2[[7]] <- hungerNoPolicy2
temp2 <- temp2[-16,]
View(temp2)
temp2[,7] <- hungerNoPolicy2
View(temp2)
temp2 <- Simulation %>%
group_by(Scenario,Policy,PriceState) %>%
select(Hunger) %>%
dcast(Scenario + PriceState ~ Policy, fun.aggregate = mean,margins = TRUE)
temp2 <- temp2[-16,]
hungerNoPolicy
hungerNoPolicy2 <- hungerNoPolicy
hungerNoPolicy2[3] = (1-S$gamma)*hungerNoPolicy[1] + S$gamma*hungerNoPolicy[2]
temp2[,7] <- hungerNoPolicy2
temp2 <- Simulation %>%
group_by(Scenario,Policy,PriceState) %>%
select(Hunger) %>%
dcast(Scenario + PriceState ~ Policy,
fun.aggregate = mean,
value.var = Hunger,
margins = TRUE)
temp2 <- temp2[-16,]
hungerNoPolicy
hungerNoPolicy2 <- hungerNoPolicy
hungerNoPolicy2[3] = (1-S$gamma)*hungerNoPolicy[1] + S$gamma*hungerNoPolicy[2]
temp2[,7] <- hungerNoPolicy2
library(xtable)
install.packages("xtable")
library(xtable)
temp2 %>% xtable(digits=2)
print((temp2 %>% xtable(digits=3)),
include.rownames=FALSE,
include.colnames=FALSE,
only.contents = TRUE,
file="./tables/simulationHunger.tex')
)
library('extrafont')
loadfonts(quiet=TRUE,device='pdf')
library('R.matlab')
library('dplyr')
library('reshape2')
library('ggplot2')
library('xtable')
source('D:/Users/Randall/Documents/PhD Dissertation/Models/CountryReserve/Scenario.R')
source('D:/Users/Randall/Documents/R/CompEcon/R/bisect.R')
downloadAgain <- FALSE  # used data on disk if false
path <- '/Users/Randall/Documents/PhD Dissertation/Models/CountryReserve/Haiti_solution.mat'
data <- readMat(path)
# there is something weird with new version of R.matlab, the following line not needed in older version
data$Solnames <- sapply(data$Solnames, function(x) x[[1]])
data$Simnames <- sapply(data$Simnames, function(x) x[[1]])
Solution <- data.frame(data$Soldata)
colnames(Solution) <- data$Solnames[1:ncol(Solution)]
Solution$Hunger <- 100*Solution$Hunger
Solution$Tax <- 100*Solution$Tax
Simulation <- data.frame(data$Simdata)
colnames(Simulation) <- data$Simnames[1:ncol(Simulation)]
Simulation$Hunger <- 100*Simulation$Hunger
Simulation$Tax <- 100*Simulation$Tax
labels_scenarios = c('Scenario 1:\nBaseline',
'Scenario 2:\nhigher aversion',
'Scenario 3:\nlonger crisis',
'Scenario 4:\nhigher cost',
'Scenario 5:\nlower PgH')
labels_policies = c('Policy A:\nHunger reduction with Grain reserve',
'Policy B:\nHunger reduction with Cash reserve',
'Policy C:\nWelfare maximiz. with Grain reserve',
'Policy D:\nStabilize price with Grain reserve')
labels_prices <- c('tranquil period','food crisis')
labels_prices2 <- c('tranquil\nperiod','food\ncrisis')
Solution$PriceState = factor(Solution$PriceState,labels=labels_prices)
Solution$Target = factor(Solution$Target,labels=c('Hunger','Welfare'))
Solution$Reserve = factor(Solution$Reserve,labels=c('Grain','Deposit'))
Solution$Policy = factor(Solution$Policy,labels=labels_policies[1:3])
Solution$Scenario = factor(Solution$Scenario,labels=labels_scenarios)
Simulation$PriceState = factor(Simulation$PriceState,labels=labels_prices)
Simulation$Target = factor(Simulation$Target,labels=c('Hunger','Welfare'))
Simulation$Reserve = factor(Simulation$Reserve,labels=c('Grain','Deposit'))
Simulation$Policy = factor(Simulation$Policy,labels=labels_policies)
Simulation$Scenario = factor(Simulation$Scenario,labels=labels_scenarios)
baseline <-  Solution %>% filter(Scenario==labels_scenarios[1] & Policy==labels_policies[1])
baseSimul <- Simulation %>% filter(Scenario==labels_scenarios[1] & Policy==labels_policies[1])
optimSimul <- Simulation %>% filter(Policy != labels_policies[4])
ruleSimul <- Simulation %>% filter(Policy == labels_policies[4])
S = makeScenario()
hungerNoPolicy <- 100*HungerRate()
rho <- rep(S$rho,5)
rho[2] <- 3.0
temp2 <- Simulation %>%
group_by(Scenario,Policy,PriceState) %>%
select(Hunger) %>%
dcast(Scenario + PriceState ~ Policy,
fun.aggregate = mean,
value.var = Hunger,
margins = TRUE)
temp2 <- temp2[-16,]
hungerNoPolicy2 <- hungerNoPolicy
hungerNoPolicy2[3] = (1-S$gamma)*hungerNoPolicy[1] + S$gamma*hungerNoPolicy[2]
temp2[,7] <- hungerNoPolicy2
temp2 <- xtable(temp2,digits=2)
print((temp2),
include.rownames=FALSE,
include.colnames=FALSE,
only.contents = TRUE,
file= "./tables/simulationHunger.tex"
)
?xtable
temp2 <- Simulation %>%
group_by(Scenario,Policy,PriceState) %>%
select(InitialStock) %>%
dcast(Scenario + PriceState ~ Policy,
fun.aggregate = mean,
value.var = InitialStock,
margins = TRUE)
temp2 <- temp2[-16,]
temp2[,7] <- NULL
temp2 <- xtable(temp2,digits=2)
print((temp2),
include.rownames=FALSE,
include.colnames=FALSE,
only.contents = TRUE,
file= "./tables/simulationStock_raw.tex"
)
temp2 <- Simulation %>%
group_by(Scenario,Policy,PriceState) %>%
select(InitialStock) %>%
dcast(Scenario + PriceState ~ Policy,
fun.aggregate = mean,
value.var = InitialStock,
margins = TRUE)
temp2 <- temp2[-16,]
temp2[,7] <- NULL
temp2 <- xtable(temp2,digits=1)
print((temp2),
include.rownames=FALSE,
include.colnames=FALSE,
only.contents = TRUE,
file= "./tables/simulationStock_raw.tex"
)
temp2 <- Simulation %>%
group_by(Scenario,Policy,PriceState) %>%
select(InitialStock) %>%
mutate(Empty= InitialStock<1e-4) %>%
dcast(Scenario + PriceState ~ Policy,
fun.aggregate = mean,
value.var = Empty,
margins = TRUE)
temp2 <- temp2[-16,]
temp2[,7] <- NULL
temp2 <- xtable(temp2,digits=1)
print((temp2),
include.rownames=FALSE,
include.colnames=FALSE,
only.contents = TRUE,
file= "./tables/simulationStockout_raw.tex"
)
temp2
temp2 <- Simulation %>%
group_by(Scenario,Policy,PriceState) %>%
select(InitialStock) %>%
dcast(Scenario + PriceState ~ Policy,
fun.aggregate = mean,
value.var = InitialStock,
margins = TRUE)
temp2 <- temp2[-16,]
temp2[,7] <- NULL
temp2 <- xtable(temp2,digits=1)
print((temp2),
include.rownames=FALSE,
include.colnames=FALSE,
only.contents = TRUE,
file= "./tables/simulationStock_raw.tex"
)
temp2
temp2 <- Simulation %>%
group_by(Scenario,Policy,PriceState) %>%
select(InitialStock) %>%
dcast(Scenario + PriceState ~ Policy,
fun.aggregate = mean,
value.var = InitialStock,
margins = TRUE)
temp2 <- Simulation %>%
group_by(Scenario,Policy,PriceState) %>%
select(InitialStockN) %>%
dcast(Scenario + PriceState ~ Policy,
fun.aggregate = mean,
value.var = InitialStockN,
margins = TRUE)
temp2 <- temp2[-16,]
temp2[,7] <- NULL
temp2 <- xtable(temp2,digits=1)
print((temp2),
include.rownames=FALSE,
include.colnames=FALSE,
only.contents = TRUE,
file= "./tables/simulationStock_raw.tex"
)
temp2 <- Simulation %>%
group_by(Scenario,Policy,PriceState) %>%
select(InitialStockN) %>%
dcast(Scenario + PriceState ~ Policy,
fun.aggregate = mean,
value.var = InitialStockN,
margins = TRUE)
temp2 <- temp2[-16,]
temp2[,7] <- NULL
temp2 <- xtable(temp2,digits=1)
print((temp2),
include.rownames=FALSE,
include.colnames=FALSE,
only.contents = TRUE,
file= "./tables/simulationStock_raw.tex"
)
names(Simulation)
temp2 <- Simulation %>%
group_by(Scenario,Policy,PriceState) %>%
select(InitialStockN) %>%
dcast(Scenario + PriceState ~ Policy,
fun.aggregate = mean,
value.var = InitialStockN,
margins = TRUE)
temp2 <- temp2[-16,]
temp2[,7] <- NULL
temp2 <- xtable(temp2,digits=1)
print((temp2),
include.rownames=FALSE,
include.colnames=FALSE,
only.contents = TRUE,
file= "./tables/simulationStock_raw.tex"
)
temp2 <- Simulation %>%
group_by(Scenario,Policy,PriceState) %>%
select(Hunger) %>%
dcast(Scenario + PriceState ~ Policy,
fun.aggregate = mean,
value.var = Hunger,
margins = TRUE)
temp2 <- temp2[-16,]
hungerNoPolicy2 <- hungerNoPolicy
hungerNoPolicy2[3] = (1-S$gamma)*hungerNoPolicy[1] + S$gamma*hungerNoPolicy[2]
temp2[,7] <- hungerNoPolicy2
temp2 <- xtable(temp2,digits=2)
print((temp2),
include.rownames=FALSE,
include.colnames=FALSE,
only.contents = TRUE,
file= "./tables/simulationHunger_raw.tex"
)
x <- 1:12
y <- -2 + 0.8*x
D <- data.frame(x,y)
View(D)
library(ggplot2)
p <- ggplot(D,aes(x,y)) + geom_point()
p
p <- ggplot(D,aes(x,y)) + geom_point(size=16)
p <- ggplot(D,aes(x,y)) + geom_point(size=24)
p
p <- ggplot(D,aes(x,y)) + geom_point(size=16)
p
p <- ggplot(D,aes(x,y)) + geom_point(size=12)
p
p <- ggplot(D,aes(x,y)) + geom_point(size=12, color='red')
p
p + theme(plot.background = element_rect(fill = "green"))
p + theme(plot.background = element_rect(fill = None))
p + theme(plot.background = element_rect(fill = NONE))
p + theme(plot.background = element_rect(fill = NULL))
p <- p + theme(plot.background = element_rect(fill = NULL))
ggsave('borrar-este-grafico')
ggsave('borrar-este-grafico.jpg')
ggsave('borrar-este-grafico.png')
ggsave('borrar-este-grafico.png',scale = 0.25)
p <- p + theme(plot.background = element_rect(fill = NULL,size = 0))
ggsave('borrar-este-grafico.png',scale = 0.25)
choose.dir()
dir('../')
setwd('../')
setwd('reveal.js-3.1.0/figures/')
p <- p + theme(plot.background = element_rect(fill = NULL,size = 0))
ggsave('borrar-este-grafico.png',scale = 0.25)
ggsave('borrar-este-grafico.svg',scale = 0.25)
p <- ggplot(D,aes(x,y)) + geom_point()
p <- p + theme(plot.background = element_rect(fill = NULL,size = 0))
ggsave('borrar-este-grafico.svg',scale = 0.25)
ggsave('borrar-este-grafico.svg')
help(ggsave)
ggsave('borrar-este-grafico.svg',width = 24,height = 12, units = 'cm')
